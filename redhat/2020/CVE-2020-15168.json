{
  "affected_release": null,
  "package_state": [
    {
      "product_name": "Red Hat Advanced Cluster Management for Kubernetes 2",
      "fix_state": "Fix deferred",
      "package_name": "node-fetch",
      "cpe": "cpe:/a:redhat:acm:2"
    }
  ],
  "threat_severity": "Low",
  "public_date": "2020-09-10T00:00:00Z",
  "bugzilla": {
    "description": "CVE-2020-15168 node-fetch: size of data after fetch() JS thread leads to DoS",
    "id": "1882329",
    "url": "https://bugzilla.redhat.com/show_bug.cgi?id=1882329"
  },
  "cvss": {
    "cvss_base_score": "",
    "cvss_scoring_vector": "",
    "status": ""
  },
  "cvss3": {
    "cvss3_base_score": "5.3",
    "cvss3_scoring_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
    "status": "verified"
  },
  "iava": "",
  "cwe": "CWE-400",
  "statement": "",
  "acknowledgement": "",
  "name": "CVE-2020-15168",
  "document_distribution": "",
  "details": [
    "node-fetch before versions 2.6.1 and 3.0.0-beta.9 did not honor the size option after following a redirect, which means that when a content size was over the limit, a FetchError would never get thrown and the process would end without failure. For most people, this fix will have a little or no impact. However, if you are relying on node-fetch to gate files above a size, the impact could be significant, for example: If you don't double-check the size of the data after fetch() has completed, your JS thread could get tied up doing work on a large file (DoS) and/or cost you money in computing."
  ],
  "references": null
}