{
  "mitigation": "A possible mitigation is to sanitize user input when sending content-type headers.",
  "affected_release": null,
  "package_state": [
    {
      "product_name": "Red Hat Advanced Cluster Management for Kubernetes 2",
      "fix_state": "Affected",
      "package_name": "rhacm2/search-ui-rhel8",
      "cpe": "cpe:/a:redhat:acm:2"
    },
    {
      "product_name": "Red Hat OpenShift Dev Spaces",
      "fix_state": "Affected",
      "package_name": "devspaces/dashboard-rhel8",
      "cpe": "cpe:/a:redhat:openshift_devspaces:3::el8"
    }
  ],
  "threat_severity": "Moderate",
  "public_date": "2022-08-09T00:00:00Z",
  "bugzilla": {
    "description": "CVE-2022-35948 nodejs: undici vulnerable to CRLF via content headers",
    "id": "2121101",
    "url": "https://bugzilla.redhat.com/show_bug.cgi?id=2121101"
  },
  "cvss": {
    "cvss_base_score": "",
    "cvss_scoring_vector": "",
    "status": ""
  },
  "cvss3": {
    "cvss3_base_score": "5.3",
    "cvss3_scoring_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
    "status": "verified"
  },
  "iava": "",
  "cwe": "CWE-93",
  "statement": "",
  "acknowledgement": "",
  "name": "CVE-2022-35948",
  "document_distribution": "",
  "details": [
    "undici is an HTTP/1.1 client, written from scratch for Node.js.`=\u003c undici@5.8.0` users are vulnerable to _CRLF Injection_ on headers when using unsanitized input as request headers, more specifically, inside the `content-type` header. Example: ``` import { request } from 'undici' const unsanitizedContentTypeInput = 'application/json\\r\\n\\r\\nGET /foo2 HTTP/1.1' await request('http://localhost:3000, { method: 'GET', headers: { 'content-type': unsanitizedContentTypeInput }, }) ``` The above snippet will perform two requests in a single `request` API call: 1) `http://localhost:3000/` 2) `http://localhost:3000/foo2` This issue was patched in Undici v5.8.1. Sanitize input when sending content-type headers using user input as a workaround.",
    "A flaw was found in the undici package. When requesting unsanitized input on content-type headers, it is possible to inject additional requests via Carriage Return/Line Feed (CRLF)."
  ],
  "references": [
    "https://github.com/nodejs/undici/security/advisories/GHSA-f772-66g8-q5h3"
  ]
}